
import { BrandReport } from './reportData';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

// Extended to make TypeScript happy with autotable
interface jsPDFWithAutoTable extends jsPDF {
  autoTable: (options: any) => jsPDF;
}

export const generateReportPDF = (report: BrandReport, modelName: string): void => {
  // Create a new PDF document
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  }) as jsPDFWithAutoTable;

  // Add document title
  const title = `${report.brandName} SEO & Brand Identity Report`;
  doc.setFontSize(20);
  doc.setTextColor(40, 40, 40);
  doc.text(title, 20, 20);
  
  // Add model attribution
  doc.setFontSize(12);
  doc.setTextColor(100, 100, 100);
  doc.text(`Generated by ${modelName}`, 20, 30);
  doc.text(`Last Updated: ${report.lastUpdated}`, 20, 36);
  
  // Add overall score
  doc.setFontSize(16);
  doc.setTextColor(40, 40, 40);
  doc.text('Overall Score', 20, 50);
  
  // Create a circle for the score
  const scoreX = 40;
  const scoreY = 65;
  const scoreRadius = 12;
  
  doc.setDrawColor(0);
  doc.setFillColor(report.overallScore > 80 ? 0 : 255, report.overallScore > 50 ? 100 : 0, 0);
  doc.circle(scoreX, scoreY, scoreRadius, 'F');
  
  // Add the score text in white
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(14);
  const scoreText = `${report.overallScore}`;
  const textWidth = doc.getTextWidth(scoreText);
  doc.text(scoreText, scoreX - (textWidth / 2), scoreY + 1);
  
  // Add report summary
  doc.setTextColor(40, 40, 40);
  doc.setFontSize(16);
  doc.text('Brand Overview', 70, 55);
  doc.setFontSize(11);
  
  // Split long text into multiple lines
  const splitSummary = doc.splitTextToSize(report.summary, 120);
  doc.text(splitSummary, 70, 62);
  
  // Add brand strengths and weaknesses
  let currentY = 90;
  
  // Strengths section
  doc.setFontSize(16);
  doc.setTextColor(40, 40, 40);
  doc.text('Strengths', 20, currentY);
  currentY += 10;
  
  // List strengths
  doc.setFontSize(10);
  report.strengths.forEach((strength, index) => {
    doc.text(`• ${strength}`, 25, currentY);
    currentY += 7;
  });
  
  currentY += 5;
  
  // Weaknesses section
  doc.setFontSize(16);
  doc.setTextColor(40, 40, 40);
  doc.text('Weaknesses', 20, currentY);
  currentY += 10;
  
  // List weaknesses
  doc.setFontSize(10);
  report.weaknesses.forEach((weakness, index) => {
    doc.text(`• ${weakness}`, 25, currentY);
    currentY += 7;
  });
  
  currentY += 10;
  
  // Add a new page for more content
  doc.addPage();
  currentY = 20;
  
  // Target Audience section
  doc.setFontSize(16);
  doc.setTextColor(40, 40, 40);
  doc.text('Target Audience', 20, currentY);
  currentY += 10;
  
  doc.setFontSize(10);
  const splitAudience = doc.splitTextToSize(report.targetAudience.primaryDescription, 170);
  doc.text(splitAudience, 20, currentY);
  currentY += splitAudience.length * 6 + 5;
  
  // Audience segments table
  doc.autoTable({
    startY: currentY,
    head: [['Segment', 'Percentage', 'Description']],
    body: report.targetAudience.segments.map(segment => [
      segment.segment,
      `${segment.percentage}%`,
      segment.description
    ]),
    margin: { top: 10, right: 20, bottom: 10, left: 20 },
    headStyles: { fillColor: [60, 60, 60] }
  });
  
  currentY = (doc as any).lastAutoTable.finalY + 15;
  
  if (currentY > 240) {
    doc.addPage();
    currentY = 20;
  }
  
  // Market Position section
  doc.setFontSize(16);
  doc.setTextColor(40, 40, 40);
  doc.text('Market Position', 20, currentY);
  currentY += 10;
  
  doc.setFontSize(12);
  doc.text(report.marketPosition.position, 20, currentY);
  currentY += 8;
  
  doc.setFontSize(10);
  const splitPosition = doc.splitTextToSize(report.marketPosition.description, 170);
  doc.text(splitPosition, 20, currentY);
  currentY += splitPosition.length * 6 + 5;
  
  doc.text(`Market Share: ${report.marketPosition.marketShare}%`, 20, currentY);
  currentY += 6;
  doc.text(`Growth Rate: ${report.marketPosition.growthRate}%`, 20, currentY);
  currentY += 10;
  
  // Competitor table
  doc.autoTable({
    startY: currentY,
    head: [['Competitor', 'Score']],
    body: report.marketPosition.competitors.map(competitor => [
      competitor.name,
      competitor.score
    ]),
    margin: { top: 10, right: 20, bottom: 10, left: 20 },
    headStyles: { fillColor: [60, 60, 60] }
  });
  
  currentY = (doc as any).lastAutoTable.finalY + 15;
  
  // Add a new page for recommendations
  doc.addPage();
  currentY = 20;
  
  // Recommendations section
  doc.setFontSize(16);
  doc.setTextColor(40, 40, 40);
  doc.text('Recommendations', 20, currentY);
  currentY += 15;
  
  // List recommendations
  report.recommendations.forEach((recommendation, index) => {
    // Set color based on priority
    let priorityColor;
    switch (recommendation.priority) {
      case 'high':
        priorityColor = [220, 50, 50];
        break;
      case 'medium':
        priorityColor = [240, 140, 0];
        break;
      case 'low':
        priorityColor = [0, 150, 50];
        break;
    }
    
    // Add recommendation title with priority color
    doc.setFontSize(12);
    doc.setTextColor(priorityColor[0], priorityColor[1], priorityColor[2]);
    doc.text(`${index + 1}. ${recommendation.title} (${recommendation.priority} priority)`, 20, currentY);
    currentY += 8;
    
    // Add recommendation description
    doc.setFontSize(10);
    doc.setTextColor(60, 60, 60);
    const splitRecommendation = doc.splitTextToSize(recommendation.description, 170);
    doc.text(splitRecommendation, 25, currentY);
    currentY += splitRecommendation.length * 6 + 10;
    
    // Add page if needed
    if (currentY > 270 && index < report.recommendations.length - 1) {
      doc.addPage();
      currentY = 20;
    }
  });
  
  // Add footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text(`Page ${i} of ${pageCount} - ${report.brandName} Brand Report - Generated with AI Brand Analytics`, 20, 290);
  }
  
  // Save the PDF
  doc.save(`${report.brandName}_Brand_Report_${modelName}.pdf`);
};

// Add PDF dependency when first importing this file
export const setupPdfDependencies = async (): Promise<void> => {
  // This is just a placeholder function to trigger the dependency addition
  console.log('PDF dependencies loaded');
};
